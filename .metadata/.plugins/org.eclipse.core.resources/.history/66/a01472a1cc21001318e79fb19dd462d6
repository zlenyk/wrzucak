package cont;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class ConnectionManager {

	private static final String[] hostsURLs = {"127.0.0.1","127.0.0.1","127.0.0.1"};
	private static final Integer regularPort = 12345;
	private static final Integer filePort = 12346;
	private OutputStream toHost = null;
	private Socket clientSocket = null;
	BufferedReader stdin = null;
	private InputStream fromHost = null;

	
	/**
	 * @param login
	 * @param file - true if sending file, false otherwise
	 * @return if connection to host was successful
	 */
	public boolean tryToConnect(String login,boolean file){
		int NOThostNr = MessageManager.whichHostNotUse(login);
		int port;
		if(file){
			port = filePort;
		}
		else{
			port = regularPort;
		}
		if(connectToHost(++NOThostNr,port)){
			return true;
		}
		else{
			return connectToHost(++NOThostNr,port);
		}
	}
	
	/**
	 * @
	 * @param number which host to use
	 * @return if operation was successful
	 */
	public boolean connectToHost(int number,int port){
		try {
			clientSocket = new Socket(hostsURLs[number],port);
		} catch (IOException e) {
			try {
				closeAll();
			} catch (IOException e1){e1.printStackTrace();}
			e.printStackTrace();
			return false;
		}
		try {
			stdin = new BufferedReader(new InputStreamReader(System.in));
			fromHost = clientSocket.getInputStream();
			toHost = clientSocket.getOutputStream();
		} catch (IOException e) {
			try {
				closeAll();
			} catch (IOException e1) {e1.printStackTrace();}
			return false;
		}
		return true;
	}
	
	public boolean write(String message){
		try {
			toHost.write(message.getBytes());
		} catch (Exception e) {
			return false;
		}
		return true;
	}
	public String read() throws IOException {
		String linia = "";
		int c;
		while ((c = fromHost.read()) != '\n') {
			linia = linia + (char) c;
		}
		
		return linia;
	}
	private void closeAll() throws IOException{
		if(toHost != null){
			toHost.close();
			toHost = null;
		}
		if(fromHost != null){
			fromHost.close();
			fromHost = null;
		}
		if(stdin != null){
			stdin.close();
			stdin = null;
		}
		if(clientSocket != null){
			clientSocket.close();
			clientSocket = null;
		}
	}
	public static class MessageManager{
		
		public static String buildMessage(String ... args){
			String message = "";
			for(String s : args){
				message += s + ";";
			}
			return message;
		}
		public static String hashString(String mes){
			MessageDigest md5;
			try {
				md5 = MessageDigest.getInstance("MD5");
			} catch (NoSuchAlgorithmException e) {
				e.printStackTrace();
				return null; //nie powinna zdarzyæ sie ta sytuacja.
			}
			md5.update(mes.getBytes());
			return (new BigInteger(1,md5.digest())).toString(16);
		}
		public static String[] decodeResponse(String response){
			return response.split("\\;");
		}
		public static int whichHostNotUse(String login){
			int result = 0;
			
			return result;
		}
		public static String fillLogin(String login){
			int k = login.length();
			while(k<20){
				login += "A";
				k++;
			}
			return login;
		}
	}
}
