import java.io.File;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;


public class NioServer implements Runnable{
	ServerSocketChannel channel;
	ByteBuffer std;
	File fileHolder;
	public static int getPort(){
		return 12345;
	}
	
	public NioServer(){
		try {
			
			fileHolder = new File("fileHolder");
			fileHolder.mkdir();
			
			channel = ServerSocketChannel.open();
			channel.socket().bind(new InetSocketAddress(getPort()));
			
			System.out.println("Serwer wystartowa³");
			std = ByteBuffer.allocate(8192);
			
		} catch (IOException e) {
			System.out.println("B³¹d przy zak³adaniu gniazda.");
			System.exit(-1);
		}
	}
	private void sendBuffer(SocketChannel socket){
		while(std.hasRemaining()){
			try {
				socket.write(std);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	private String makeStringFromBuffer(){
		return new String(std.array(),0,16);
	}
	private void putStringIntoBuffer(String s){
		std.clear();
		std.put(s.getBytes());
		std.flip();
	}
	private void sendMessage(String message,SocketChannel socket){
		putStringIntoBuffer(message);
		sendBuffer(socket);
	}
	private void wyslijListe(SocketChannel socket){
		File[] fileList = fileHolder.listFiles();
		String msgList = "";
		for(File f: fileList)
			msgList += f.getName() + " ";
		msgList += '\n';
		sendMessage(msgList,socket);
	}
	private void wyslijPlik(File toSend,SocketChannel socket){
		putFileIntoBuffer(toSend);
		sendBuffer(socket);
	}
	
	private void putFileIntoBuffer(File toSend) {
		String stringPath = toSend.getPath();
		Path path = Paths.get(stringPath);
		
		try {
			std.clear();
			std.put("OK;".getBytes());
			Long len = toSend.length();
			byte byteLen = len.byteValue();
			std.put(byteLen);
			std.put(";".getBytes());
			std.put(Files.readAllBytes(path));
		} catch (IOException e) {
			System.out.println("B³¹d przy wczytywaniu pliku");
		}
		std.flip();
	}

	private File getFile(String data)
	{
		int number =  Integer.parseInt(data.substring(4));
		File[] fileList = fileHolder.listFiles();
		return fileList[number];
	}
	public void run(){
		while(true){
			try {
				SocketChannel socket = channel.accept();
				System.out.println("Jest klient.");

				while(true)
				{
					std.clear();
					int ret = socket.read(std);
					std.flip();
					
					if(ret == -1) break;
					
					String data = makeStringFromBuffer();
					System.out.println(data);
					if(data.startsWith("List")){
						wyslijListe(socket);
						continue;
					}else if(data.startsWith("Exit")){
						break;
					}else{
						wyslijPlik(getFile(data),socket);
					}
				}
				channel.close();
			} catch (IOException e) {
				e.printStackTrace();
				System.exit(-1);
			}
		}
	}
	
	public static void main(String[] args){
		new Thread(new NioServer()).start();
	}
}
