package cont;

import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * @author LEZY
 *
 */
public class LoginProtocole {

	private static final String NOCONNECTION = "UNSUCCESSFUL CONNECTION";
	private enum RequestCode{
		LOGIN,REGISTER,SEND;
	}
	private enum ResponseCode{
		OK,WRONG,ERROR;
	}
	LoginProtocole(){}
	
	
	/**
	 * @param login
	 * @param password
	 * @return sessionID or 
	 * @throws IOException in case of connection error
	 */
	public String login(String login, String password) throws IOException{
		ConnectionManager cm = new ConnectionManager();
		
		if(tryToConnect(login,cm) == false){
			return ResponseCode.WRONG.name();
		}
		
		String message = buildMessage(RequestCode.LOGIN.name(),login,hashString(password));
		cm.write(message);
		String[] response = decodeResponse(cm.read());
		
		if(response[0] == ResponseCode.OK.name()){
			return response[1];
		}
		else if(response[0] == ResponseCode.WRONG.name()){
			retur
		}
		return "";
	}
	
	
	public boolean tryToConnect(String login,ConnectionManager cm){
		int NOThostNr = whichHostNotUse(login);
		if(cm.connectToHost(++NOThostNr)){
			return true;
		}
		else{
			return cm.connectToHost(++NOThostNr);
		}
	}
	private int whichHostNotUse(String login){
		int result = 0;
		
		return result;
	}
	private String buildMessage(String ... args){
		String message = "";
		for(String s : args){
			message += s + ";";
		}
		return message;
	}
	private String hashString(String mes){
		MessageDigest md5;
		try {
			md5 = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null; //nie powinna zdarzyæ sie ta sytuacja.
		}
		md5.update(mes.getBytes());
		return (new BigInteger(1,md5.digest())).toString(16);
	}
	private String[] decodeResponse(String response){
		return response.split("\\|");
	}
}


